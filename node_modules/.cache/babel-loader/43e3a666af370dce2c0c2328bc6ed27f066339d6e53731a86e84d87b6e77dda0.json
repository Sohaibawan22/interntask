{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Laptop\\\\Desktop\\\\my task\\\\src\\\\components\\\\StudentList.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction StudentList({\n  students,\n  selectedSubject\n}) {\n  const getPerformanceClass = value => {\n    if (value >= 90) return 'excellent';\n    if (value >= 80) return 'good';\n    if (value >= 70) return 'average';\n    return 'needs-improvement';\n  };\n  const sortStudents = (students, subject) => {\n    if (subject === 'all') {\n      return [...students].sort((a, b) => {\n        const aAvg = (a.math + a.english + a.science) / 3;\n        const bAvg = (b.math + b.english + b.science) / 3;\n        return bAvg - aAvg;\n      });\n    } else {\n      return [...students].sort((a, b) => b[subject] - a[subject]);\n    }\n  };\n  const sortedStudents = sortStudents(students, selectedSubject);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"student-list\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"list-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-cell\",\n        children: \"Student\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-cell\",\n        children: \"Math\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-cell\",\n        children: \"English\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-cell\",\n        children: \"Science\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-cell\",\n        children: \"Average\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"list-body\",\n      children: sortedStudents.map((student, index) => {\n        const average = Math.round((student.math + student.english + student.science) / 3);\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"student-row\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"student-cell\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"student-info\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"student-name\",\n                children: student.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 43,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"student-rank\",\n                children: [\"#\", index + 1]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 44,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 42,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `score-cell ${getPerformanceClass(student.math)}`,\n            children: [student.math, \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `score-cell ${getPerformanceClass(student.english)}`,\n            children: [student.english, \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `score-cell ${getPerformanceClass(student.science)}`,\n            children: [student.science, \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `score-cell average ${getPerformanceClass(average)}`,\n            children: [average, \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 15\n          }, this)]\n        }, student.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n}\n_c = StudentList;\nexport default StudentList;\nvar _c;\n$RefreshReg$(_c, \"StudentList\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","StudentList","students","selectedSubject","getPerformanceClass","value","sortStudents","subject","sort","a","b","aAvg","math","english","science","bAvg","sortedStudents","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","student","index","average","Math","round","name","id","_c","$RefreshReg$"],"sources":["C:/Users/Laptop/Desktop/my task/src/components/StudentList.js"],"sourcesContent":["import React from 'react';\r\n\r\nfunction StudentList({ students, selectedSubject }) {\r\n  const getPerformanceClass = (value) => {\r\n    if (value >= 90) return 'excellent';\r\n    if (value >= 80) return 'good';\r\n    if (value >= 70) return 'average';\r\n    return 'needs-improvement';\r\n  };\r\n\r\n  const sortStudents = (students, subject) => {\r\n    if (subject === 'all') {\r\n      return [...students].sort((a, b) => {\r\n        const aAvg = (a.math + a.english + a.science) / 3;\r\n        const bAvg = (b.math + b.english + b.science) / 3;\r\n        return bAvg - aAvg;\r\n      });\r\n    } else {\r\n      return [...students].sort((a, b) => b[subject] - a[subject]);\r\n    }\r\n  };\r\n\r\n  const sortedStudents = sortStudents(students, selectedSubject);\r\n\r\n  return (\r\n    <div className=\"student-list\">\r\n      <div className=\"list-header\">\r\n        <div className=\"header-cell\">Student</div>\r\n        <div className=\"header-cell\">Math</div>\r\n        <div className=\"header-cell\">English</div>\r\n        <div className=\"header-cell\">Science</div>\r\n        <div className=\"header-cell\">Average</div>\r\n      </div>\r\n      \r\n      <div className=\"list-body\">\r\n        {sortedStudents.map((student, index) => {\r\n          const average = Math.round((student.math + student.english + student.science) / 3);\r\n          \r\n          return (\r\n            <div key={student.id} className=\"student-row\">\r\n              <div className=\"student-cell\">\r\n                <div className=\"student-info\">\r\n                  <span className=\"student-name\">{student.name}</span>\r\n                  <span className=\"student-rank\">#{index + 1}</span>\r\n                </div>\r\n              </div>\r\n              <div className={`score-cell ${getPerformanceClass(student.math)}`}>\r\n                {student.math}%\r\n              </div>\r\n              <div className={`score-cell ${getPerformanceClass(student.english)}`}>\r\n                {student.english}%\r\n              </div>\r\n              <div className={`score-cell ${getPerformanceClass(student.science)}`}>\r\n                {student.science}%\r\n              </div>\r\n              <div className={`score-cell average ${getPerformanceClass(average)}`}>\r\n                {average}%\r\n              </div>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default StudentList; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}