{"ast":null,"code":"// Generate random score between min and max\nconst generateRandomScore = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\n// Generate student data\nconst generateStudents = (className, count) => {\n  const students = [];\n  for (let i = 1; i <= count; i++) {\n    students.push({\n      id: `${className}-${i}`,\n      name: `Student ${i}`,\n      math: generateRandomScore(65, 95),\n      english: generateRandomScore(70, 98),\n      science: generateRandomScore(68, 92)\n    });\n  }\n  return students;\n};\n\n// Calculate class averages\nconst calculateClassAverages = students => {\n  const totalMath = students.reduce((sum, student) => sum + student.math, 0);\n  const totalEnglish = students.reduce((sum, student) => sum + student.english, 0);\n  const totalScience = students.reduce((sum, student) => sum + student.science, 0);\n  return {\n    math: Math.round(totalMath / students.length),\n    english: Math.round(totalEnglish / students.length),\n    science: Math.round(totalScience / students.length),\n    overall: Math.round((totalMath + totalEnglish + totalScience) / (students.length * 3))\n  };\n};\n\n// Generate mock data\nexport const generateMockData = () => {\n  const room201Students = generateStudents('Room201', 10);\n  const room202Students = generateStudents('Room202', 10);\n  const room201Averages = calculateClassAverages(room201Students);\n  const room202Averages = calculateClassAverages(room202Students);\n\n  // Calculate global averages\n  const allStudents = [...room201Students, ...room202Students];\n  const globalAverages = calculateClassAverages(allStudents);\n  return {\n    teacher: {\n      name: \"Muhammad Sohaib\",\n      school: \"Public School\",\n      grade: \"Grade 5\"\n    },\n    classes: {\n      room201: {\n        name: \"Room 201\",\n        students: room201Students,\n        averages: room201Averages\n      },\n      room202: {\n        name: \"Room 202\",\n        students: room202Students,\n        averages: room202Averages\n      }\n    },\n    globalAverages,\n    subjects: ['Math', 'English', 'Science']\n  };\n};","map":{"version":3,"names":["generateRandomScore","min","max","Math","floor","random","generateStudents","className","count","students","i","push","id","name","math","english","science","calculateClassAverages","totalMath","reduce","sum","student","totalEnglish","totalScience","round","length","overall","generateMockData","room201Students","room202Students","room201Averages","room202Averages","allStudents","globalAverages","teacher","school","grade","classes","room201","averages","room202","subjects"],"sources":["C:/Users/Laptop/Desktop/performance/my task/src/utils/mockData.js"],"sourcesContent":["// Generate random score between min and max\r\nconst generateRandomScore = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1)) + min;\r\n};\r\n\r\n// Generate student data\r\nconst generateStudents = (className, count) => {\r\n  const students = [];\r\n  for (let i = 1; i <= count; i++) {\r\n    students.push({\r\n      id: `${className}-${i}`,\r\n      name: `Student ${i}`,\r\n      math: generateRandomScore(65, 95),\r\n      english: generateRandomScore(70, 98),\r\n      science: generateRandomScore(68, 92)\r\n    });\r\n  }\r\n  return students;\r\n};\r\n\r\n// Calculate class averages\r\nconst calculateClassAverages = (students) => {\r\n  const totalMath = students.reduce((sum, student) => sum + student.math, 0);\r\n  const totalEnglish = students.reduce((sum, student) => sum + student.english, 0);\r\n  const totalScience = students.reduce((sum, student) => sum + student.science, 0);\r\n  \r\n  return {\r\n    math: Math.round(totalMath / students.length),\r\n    english: Math.round(totalEnglish / students.length),\r\n    science: Math.round(totalScience / students.length),\r\n    overall: Math.round((totalMath + totalEnglish + totalScience) / (students.length * 3))\r\n  };\r\n};\r\n\r\n// Generate mock data\r\nexport const generateMockData = () => {\r\n  const room201Students = generateStudents('Room201', 10);\r\n  const room202Students = generateStudents('Room202', 10);\r\n  \r\n  const room201Averages = calculateClassAverages(room201Students);\r\n  const room202Averages = calculateClassAverages(room202Students);\r\n  \r\n  // Calculate global averages\r\n  const allStudents = [...room201Students, ...room202Students];\r\n  const globalAverages = calculateClassAverages(allStudents);\r\n  \r\n  return {\r\n    teacher: {\r\n      name: \"Muhammad Sohaib\",\r\n      school: \"Public School\",\r\n      grade: \"Grade 5\"\r\n    },\r\n    classes: {\r\n      room201: {\r\n        name: \"Room 201\",\r\n        students: room201Students,\r\n        averages: room201Averages\r\n      },\r\n      room202: {\r\n        name: \"Room 202\", \r\n        students: room202Students,\r\n        averages: room202Averages\r\n      }\r\n    },\r\n    globalAverages,\r\n    subjects: ['Math', 'English', 'Science']\r\n  };\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}