{"ast":null,"code":"// --- RAW MOCK DATA ---\nconst rawData = {\n  teacher: {\n    name: \"Ms. Sarah Chen\",\n    school: \"Large Public School\",\n    grade: \"Grade 5\"\n  },\n  classes: {\n    room201: {\n      id: 'room201',\n      name: 'Grade 5 - Room 201',\n      students: [{\n        id: 's1',\n        name: 'ali',\n        scores: {\n          math: 92,\n          ela: 88,\n          science: 95\n        }\n      }, {\n        id: 's2',\n        name: 'umer',\n        scores: {\n          math: 85,\n          ela: 91,\n          science: 87\n        }\n      }, {\n        id: 's3',\n        name: 'Noor',\n        scores: {\n          math: 78,\n          ela: 75,\n          science: 80\n        }\n      }, {\n        id: 's4',\n        name: 'Emman',\n        scores: {\n          math: 90,\n          ela: 94,\n          science: 68\n        }\n      }, {\n        id: 's5',\n        name: 'Sohaib',\n        scores: {\n          math: 98,\n          ela: 98,\n          science: 95\n        }\n      }, {\n        id: 's6',\n        name: 'Minahil',\n        scores: {\n          math: 89,\n          ela: 92,\n          science: 88\n        }\n      }, {\n        id: 's7',\n        name: 'akash',\n        scores: {\n          math: 72,\n          ela: 70,\n          science: 75\n        }\n      }, {\n        id: 's8',\n        name: 'yavish',\n        scores: {\n          math: 90,\n          ela: 93,\n          science: 91\n        }\n      }, {\n        id: 's9',\n        name: 'Zohan',\n        scores: {\n          math: 77,\n          ela: 80,\n          science: 79\n        }\n      }, {\n        id: 's10',\n        name: 'khan',\n        scores: {\n          math: 94,\n          ela: 90,\n          science: 96\n        }\n      }]\n    },\n    room202: {\n      id: 'room202',\n      name: 'Grade 5 - Room 202',\n      students: [{\n        id: 's11',\n        name: 'Awan',\n        scores: {\n          math: 88,\n          ela: 90,\n          science: 85\n        }\n      }, {\n        id: 's12',\n        name: 'Junaid',\n        scores: {\n          math: 75,\n          ela: 78,\n          science: 82\n        }\n      }, {\n        id: 's13',\n        name: 'Sophia',\n        scores: {\n          math: 91,\n          ela: 89,\n          science: 94\n        }\n      }, {\n        id: 's14',\n        name: 'Masoom',\n        scores: {\n          math: 82,\n          ela: 85,\n          science: 81\n        }\n      }, {\n        id: 's15',\n        name: 'Isabella',\n        scores: {\n          math: 70,\n          ela: 73,\n          science: 76\n        }\n      }, {\n        id: 's16',\n        name: 'Kaleem',\n        scores: {\n          math: 80,\n          ela: 79,\n          science: 83\n        }\n      }, {\n        id: 's17',\n        name: 'arshad',\n        scores: {\n          math: 93,\n          ela: 95,\n          science: 90\n        }\n      }, {\n        id: 's18',\n        name: 'aleena',\n        scores: {\n          math: 68,\n          ela: 72,\n          science: 65\n        }\n      }, {\n        id: 's19',\n        name: 'Aiman',\n        scores: {\n          math: 87,\n          ela: 86,\n          science: 89\n        }\n      }, {\n        id: 's20',\n        name: 'wasif',\n        scores: {\n          math: 76,\n          ela: 74,\n          science: 78\n        }\n      }]\n    }\n  }\n};\n\n// --- PERFORMANCE CALCULATION FUNCTIONS ---\nconst calculateClassAverage = (students, subject) => {\n  if (!students || students.length === 0) return 0;\n  const total = students.reduce((sum, student) => sum + student.scores[subject], 0);\n  return Math.round(total / students.length);\n};\nconst getClassOverallAverage = students => {\n  if (!students || students.length === 0) return 0;\n  const total = students.reduce((sum, student) => {\n    return sum + (student.scores.math + student.scores.ela + student.scores.science) / 3;\n  }, 0);\n  return Math.round(total / students.length);\n};\nconst getGlobalAverages = classesObject => {\n  const allStudents = Object.values(classesObject).flatMap(cls => cls.students);\n  const mathAvg = calculateClassAverage(allStudents, 'math');\n  const elaAvg = calculateClassAverage(allStudents, 'ela');\n  const scienceAvg = calculateClassAverage(allStudents, 'science');\n  const overallAvg = getClassOverallAverage(allStudents);\n  return {\n    math: mathAvg,\n    english: elaAvg,\n    science: scienceAvg,\n    overall: overallAvg\n  };\n};\n\n// --- GENERATE FINAL MOCK DATA WITH AVERAGES ---\nconst generateFullMockData = data => {\n  const classesWithAverages = {};\n  Object.keys(data.classes).forEach(classKey => {\n    const students = data.classes[classKey].students;\n    classesWithAverages[classKey] = {\n      ...data.classes[classKey],\n      averages: {\n        math: calculateClassAverage(students, 'math'),\n        english: calculateClassAverage(students, 'ela'),\n        science: calculateClassAverage(students, 'science'),\n        overall: getClassOverallAverage(students)\n      }\n    };\n  });\n  return {\n    ...data,\n    classes: classesWithAverages,\n    globalAverages: getGlobalAverages(classesWithAverages),\n    subjects: ['Math', 'English', 'Science']\n  };\n};\nexport const mockData = generateFullMockData(rawData);","map":{"version":3,"names":["rawData","teacher","name","school","grade","classes","room201","id","students","scores","math","ela","science","room202","calculateClassAverage","subject","length","total","reduce","sum","student","Math","round","getClassOverallAverage","getGlobalAverages","classesObject","allStudents","Object","values","flatMap","cls","mathAvg","elaAvg","scienceAvg","overallAvg","english","overall","generateFullMockData","data","classesWithAverages","keys","forEach","classKey","averages","globalAverages","subjects","mockData"],"sources":["C:/Users/Laptop/Desktop/performance/my task/src/utils/mockData.js"],"sourcesContent":["// --- RAW MOCK DATA ---\r\nconst rawData = {\r\n  teacher: {\r\n    name: \"Ms. Sarah Chen\",\r\n    school: \"Large Public School\",\r\n    grade: \"Grade 5\"\r\n  },\r\n  classes: {\r\n    room201: {\r\n      id: 'room201',\r\n      name: 'Grade 5 - Room 201',\r\n      students: [\r\n        { id: 's1', name: 'ali', scores: { math: 92, ela: 88, science: 95 } },\r\n        { id: 's2', name: 'umer', scores: { math: 85, ela: 91, science: 87 } },\r\n        { id: 's3', name: 'Noor', scores: { math: 78, ela: 75, science: 80 } },\r\n        { id: 's4', name: 'Emman', scores: { math: 90, ela: 94, science: 68 } },\r\n        { id: 's5', name: 'Sohaib', scores: { math: 98, ela: 98, science: 95 } },\r\n        { id: 's6', name: 'Minahil', scores: { math: 89, ela: 92, science: 88 } },\r\n        { id: 's7', name: 'akash', scores: { math: 72, ela: 70, science: 75 } },\r\n        { id: 's8', name: 'yavish', scores: { math: 90, ela: 93, science: 91 } },\r\n        { id: 's9', name: 'Zohan', scores: { math: 77, ela: 80, science: 79 } },\r\n        { id: 's10', name: 'khan', scores: { math: 94, ela: 90, science: 96 } },\r\n      ],\r\n    },\r\n    room202: {\r\n      id: 'room202',\r\n      name: 'Grade 5 - Room 202',\r\n      students: [\r\n        { id: 's11', name: 'Awan', scores: { math: 88, ela: 90, science: 85 } },\r\n        { id: 's12', name: 'Junaid', scores: { math: 75, ela: 78, science: 82 } },\r\n        { id: 's13', name: 'Sophia', scores: { math: 91, ela: 89, science: 94 } },\r\n        { id: 's14', name: 'Masoom', scores: { math: 82, ela: 85, science: 81 } },\r\n        { id: 's15', name: 'Isabella', scores: { math: 70, ela: 73, science: 76 } },\r\n        { id: 's16', name: 'Kaleem', scores: { math: 80, ela: 79, science: 83 } },\r\n        { id: 's17', name: 'arshad', scores: { math: 93, ela: 95, science: 90 } },\r\n        { id: 's18', name: 'aleena', scores: { math: 68, ela: 72, science: 65 } },\r\n        { id: 's19', name: 'Aiman', scores: { math: 87, ela: 86, science: 89 } },\r\n        { id: 's20', name: 'wasif', scores: { math: 76, ela: 74, science: 78 } },\r\n      ],\r\n    },\r\n  },\r\n};\r\n\r\n// --- PERFORMANCE CALCULATION FUNCTIONS ---\r\nconst calculateClassAverage = (students, subject) => {\r\n  if (!students || students.length === 0) return 0;\r\n  const total = students.reduce((sum, student) => sum + student.scores[subject], 0);\r\n  return Math.round(total / students.length);\r\n};\r\n\r\nconst getClassOverallAverage = (students) => {\r\n  if (!students || students.length === 0) return 0;\r\n  const total = students.reduce((sum, student) => {\r\n    return sum + (student.scores.math + student.scores.ela + student.scores.science) / 3;\r\n  }, 0);\r\n  return Math.round(total / students.length);\r\n};\r\n\r\nconst getGlobalAverages = (classesObject) => {\r\n  const allStudents = Object.values(classesObject).flatMap(cls => cls.students);\r\n  const mathAvg = calculateClassAverage(allStudents, 'math');\r\n  const elaAvg = calculateClassAverage(allStudents, 'ela');\r\n  const scienceAvg = calculateClassAverage(allStudents, 'science');\r\n  const overallAvg = getClassOverallAverage(allStudents);\r\n  return { math: mathAvg, english: elaAvg, science: scienceAvg, overall: overallAvg };\r\n};\r\n\r\n// --- GENERATE FINAL MOCK DATA WITH AVERAGES ---\r\nconst generateFullMockData = (data) => {\r\n  const classesWithAverages = {};\r\n  Object.keys(data.classes).forEach(classKey => {\r\n    const students = data.classes[classKey].students;\r\n    classesWithAverages[classKey] = {\r\n      ...data.classes[classKey],\r\n      averages: {\r\n        math: calculateClassAverage(students, 'math'),\r\n        english: calculateClassAverage(students, 'ela'),\r\n        science: calculateClassAverage(students, 'science'),\r\n        overall: getClassOverallAverage(students),\r\n      }\r\n    };\r\n  });\r\n\r\n  return {\r\n    ...data,\r\n    classes: classesWithAverages,\r\n    globalAverages: getGlobalAverages(classesWithAverages),\r\n    subjects: ['Math', 'English', 'Science'],\r\n  };\r\n};\r\n\r\nexport const mockData = generateFullMockData(rawData);\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}